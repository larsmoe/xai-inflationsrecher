import numpy as np
import matplotlib.pyplot as plt
from calculate_inflation import calc_inflation
feat_imp = np.load('feat_imp.npy')
feat_imp_der = np.load('feat_imp_der.npy')
feat_imp_int = np.load('feat_imp_int.npy')
feat_imp_one_good_int = np.load('feat_imp_int_one_good.npy')
feat_imp_same_good_der = np.load('feat_imp_same_input_der.npy')
feat_imp_same_good_int = np.load('feat_imp_int_same_input.npy')
categories = np.load('categories.npy')

def align_yaxis(ax1, v1, ax2, v2):
    """adjust ax2 ylimit so that v2 in ax2 is aligned to v1 in ax1"""
    _, y1 = ax1.transData.transform((0, v1))
    _, y2 = ax2.transData.transform((0, v2))
    inv = ax2.transData.inverted()
    _, dy = inv.transform((0, 0)) - inv.transform((0, y1-y2))
    miny, maxy = ax2.get_ylim()
    ax2.set_ylim(miny+dy, maxy+dy)

fig, ax = plt.subplots()

plt.bar(range(len(feat_imp)), feat_imp)
ax.set_yticks([])
ax.set_ylabel('Feature Importance', size=20)
ax.tick_params(axis='x', rotation=90)
ax.set_xticks(range(len(categories)))
ax.set_xticklabels(categories, size=15)


fig2, ax2 = plt.subplots()
plt.bar(range(len(feat_imp_der)), feat_imp_der)
ax2.set_yticks([])
ax2.set_ylabel('Feature Importance', size=20)
ax2.tick_params(axis='x', rotation=90)
ax2.set_xticks(range(len(categories)))
ax2.set_xticklabels(categories, size=15)


fig3, ax3 = plt.subplots()
plt.bar(range(len(feat_imp_der)), feat_imp_int)
#ax3.set_yticks([])
ax3.set_ylabel('Feature Importance', size=20)
ax3.tick_params(axis='x', rotation=90)
ax3.set_xticks(range(len(categories)))
ax3.set_xticklabels(categories, size=15)

off_weights = np.load('official_weights.npy')
official_vpi_june20 = np.load('official_vpi_june20.npy')
official_vpi_june21 = np.load('official_vpi_june21.npy')
test_weights = np.array([150, 200, 35, 300, 50, 20, 90, 5, 5, 20, 100, 100, 23, 20, 50, 50, 20, 0, 220])
off_inflation = calc_inflation(off_weights, official_vpi_june21, official_vpi_june20)
test_weights = test_weights / np.sum(test_weights)
off_weights = off_weights / np.sum(off_weights)

fig4, ax4 = plt.subplots()
ax4_1 = ax4.twinx()
#print(test_weights - off_weights)
#print(official_vpi_june21/official_vpi_june20 - off_inflation)
ax4.bar(range(len(feat_imp_der)), (test_weights - off_weights), color='r', align='edge', width=-0.4)
ax4_1.bar(range(len(feat_imp_der)), official_vpi_june21/official_vpi_june20 - off_inflation - 1, color='b', align='edge', width=0.4)
#ax4.set_yticks([])
ax4.set_ylabel('Difference in Weights (red)', size=20)
ax4_1.set_ylabel('Difference in Inflation Rate to Offical Inflation Rate (blue)', size=20)
ax4.tick_params(axis='x', rotation=90)
ax4.set_xticks(range(len(categories)))
ax4.set_xticklabels(categories, size=15)
align_yaxis(ax4, 0, ax4_1, 0)

fig5, ax5 = plt.subplots()
plt.bar(range(len(feat_imp_der)), feat_imp_one_good_int)
#ax3.set_yticks([])
ax5.set_ylabel('Feature Importance', size=20)
ax5.tick_params(axis='x', rotation=90)
ax5.set_xticks(range(len(categories)))
ax5.set_xticklabels(categories, size=15)

fig6, ax6 = plt.subplots()
plt.bar(range(len(feat_imp_der)), feat_imp_same_good_der)
#print(feat_imp_same_good_der)
#ax3.set_yticks([])
ax6.set_ylabel('Feature Importance', size=20)
ax6.tick_params(axis='x', rotation=90)
ax6.set_xticks(range(len(categories)))
ax6.set_xticklabels(categories, size=15)

fig7, ax7 = plt.subplots()
plt.bar(range(len(feat_imp_der)), feat_imp_same_good_int)
#ax3.set_yticks([])
ax7.set_ylabel('Feature Importance', size=20)
ax7.tick_params(axis='x', rotation=90)
ax7.set_xticks(range(len(categories)))
ax7.set_xticklabels(categories, size=15)
plt.show()